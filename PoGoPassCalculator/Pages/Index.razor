@page "/"

@using PoGoPassCalculator.Services
@using PoGoPassCalculator.Models

@implements IDisposable

@inject CalculatorService Service
@inject CalculatorConfiguration Config

<h1>Calculadora de Passes</h1>

<h2>Compare pacotes do Pokémon GO para saber qual é o que dá mais retorno.</h2>
<br />
@if (!Config.BundlesToCompare?.Any() ?? true)
{
    <div class="jumbotron">
        <h4>Acesse as <a href="/config">Configurações</a> para criar os pacotes</h4>
    </div>
}
else
{
    @if (analysisResult == null)
    {
        <h4>Pacotes disponíveis</h4>
        <BundleCollection Bundles="Config.BundlesToCompare" ShowRemove="false"></BundleCollection>

        <hr />
        <EditForm Model="Config">
            <h4>Como deseja calcular:</h4>
            <select class="form-control" @bind="selectionType">
                <option value="@SelectionType.Money">Dinheiro</option>
                <option value="@SelectionType.Coin">Pokécoin</option>
            </select>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger">
                    <h3 class="alert-heading">Erro</h3>
                    <p>@errorMessage</p>
                </div>
            }


            @if (selectionType == SelectionType.Coin)
            {
                <div class="form-group">
                    <label for="txtMoney">Tenho Pokécoins:</label>
                    <input type="tel" class="form-control" id="txtMoney" @bind-value="Config.CoinsProduced" />
                </div>
            }
            else if (selectionType == SelectionType.Money)
            {
                <div class="form-group">
                    <label for="txtMoney">@Config.Meta_Currency investido:</label>
                    <input type="tel" class="form-control" id="txtMoney" @bind-value="Config.InvestedValue" />
                </div>
            }
            else
            {
                <h4>Escolha uma forma de calcular acima.</h4>
            }

            <button class="btn btn-info" @onclick="Calcular">Calcular</button>
        </EditForm>

    }
    else
    {
        <div class="container">
            <h3>Resultado da análise</h3>
            <p>
                <h4>Melhor pacote para compra:</h4>
                @if (bestBundle == null)
                {
                    <h5><b>Indiferente.</b></h5>
                }
                else
                {
                    <div>O pacote @(bestBundle.BundleId), que custa @(bestBundle.Value) pokécoins e te daria @(bestBundle.ReceivedPasses) passes do tipo @bestBundle.PassType com as @Config.CoinsProduced moedas que você teria.</div>

                }
                <hr />
                <h5>Fatos:</h5>
                <ul>
                    <li>Moedas recebidas: @Config.CoinsProduced</li>
                    @if (Config.InvestedValue > 0)
                    {
                        <li>Troco: @Config.Meta_Currency @string.Format("{0:N2}", Config.SpareMoney)</li>
                    }
                </ul>
            </p>
            <p>
                <h4><strong>Por que?</strong></h4>
            </p>
            <p>
                @if (bestBundle == null)
                {
                    <div>Porque os pacotes darão a mesma quantidade de passes com o valor investido. Fica ao seu critério decidir o que é mais vantajoso.</div>

                }
                else
                {
                    <div>
                        Veja o comparativo:
                        <table class="table table-bordered">
                            <thead>
                                <tr>
                                    <td>Comparação #</td>
                                    <td>Pacote A</td>
                                    <td>Pacote B</td>
                                    <td>Análise</td>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var comparison in analysisResult.PassQuantityComparison)
                                {
                                    <tr class="@(bestBundle.BundleId==comparison.BestBundleId?"best-of-all":string.Empty)">
                                        <td>@comparison.BundleA.BundleId vs @comparison.BundleB.BundleId</td>
                                        <td>
                                            <PassBundle Bundle="comparison.BundleA" IsBest="comparison.BestBundleId==comparison.BundleA.BundleId"></PassBundle>
                                        </td>
                                        <td>
                                            <PassBundle Bundle="comparison.BundleB" IsBest="comparison.BestBundleId==comparison.BundleB.BundleId"></PassBundle>
                                        </td>
                                        <td>
                                            <ul>
                                                @if (comparison.BestBundleId == -1)
                                                {
                                                    <li>Não existe diferença aqui.</li>
                                                }
                                                else
                                                {
                                                    <li>Existe uma diferença de @comparison.PassDifference passes em favor do pacote @comparison.BestBundleId</li>
                                                }
                                                <li>
                                                    Sobram @comparison.BundleA.RemainingCoins moedas com o Pacote 1.
                                                </li>
                                                <li>
                                                    Sobram @comparison.BundleB.RemainingCoins moedas com o pacote 2.
                                                </li>
                                            </ul>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
            </p>
            <button class="btn btn-info" @onclick="Reset">Voltar</button>

        </div>
    }
}
@code
{
    string errorMessage { get; set; }
    enum SelectionType { Money, Coin }
    private SelectionType selectionType { get; set; }

    private Bundle bestBundle { get; set; }
    private AnalysisResult analysisResult { get; set; }
    private int analysisCount;

    async Task Calcular()
    {
        analysisCount = 0;
        errorMessage = string.Empty;

        if (Config.CoinsProduced == 0 && Config.InvestedValue == 0)
        {
            errorMessage = "Insira o valor investido ou a quantidade em pokécoins que você tem";
            return;
        }

        var result = await Task.Run(() => Service.CalculateBundles(Config));

        bestBundle = result.BestBundle;
        analysisResult = result;
    }

    void Reset()
    {
        analysisCount = 0;
        analysisResult = null;
        bestBundle = null;
    }

    protected override Task OnInitializedAsync()
    {
        Config.OnChange += StateHasChanged;
        return base.OnInitializedAsync();
    }

    public void Dispose()
    {
        Config.OnChange -= StateHasChanged;
    }
}